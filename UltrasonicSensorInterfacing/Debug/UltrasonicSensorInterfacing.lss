
UltrasonicSensorInterfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  000009c4  00000a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800226  00800226  00000a7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a6  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d69  00000000  00000000  00002256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008bc  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  0000387c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072e  00000000  00000000  00003a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b7  00000000  00000000  0000412e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000049e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ec       	ldi	r30, 0xC4	; 196
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 32       	cpi	r26, 0x26	; 38
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e2       	ldi	r26, 0x26	; 38
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 33       	cpi	r26, 0x34	; 52
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 45 03 	call	0x68a	; 0x68a <main>
 122:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
}

//Function to initialize sensor
void ud_init()
{
	ud_port_config();
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	87 6f       	ori	r24, 0xF7	; 247
 12e:	87 b9       	out	0x07, r24	; 7
 130:	88 b1       	in	r24, 0x08	; 8
 132:	88 70       	andi	r24, 0x08	; 8
 134:	88 b9       	out	0x08, r24	; 8
 136:	08 95       	ret

00000138 <lcd_reset>:
 138:	86 e6       	ldi	r24, 0x66	; 102
 13a:	9e e0       	ldi	r25, 0x0E	; 14
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_reset+0x4>
 140:	00 00       	nop
 142:	40 98       	cbi	0x08, 0	; 8
 144:	41 98       	cbi	0x08, 1	; 8
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	88 b9       	out	0x08, r24	; 8
 14a:	42 9a       	sbi	0x08, 2	; 8
 14c:	ef ef       	ldi	r30, 0xFF	; 255
 14e:	f7 e4       	ldi	r31, 0x47	; 71
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_reset+0x18>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_reset+0x1e>
 156:	00 00       	nop
 158:	42 98       	cbi	0x08, 2	; 8
 15a:	e6 e6       	ldi	r30, 0x66	; 102
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_reset+0x26>
 162:	00 00       	nop
 164:	40 98       	cbi	0x08, 0	; 8
 166:	41 98       	cbi	0x08, 1	; 8
 168:	88 b9       	out	0x08, r24	; 8
 16a:	42 9a       	sbi	0x08, 2	; 8
 16c:	ef ef       	ldi	r30, 0xFF	; 255
 16e:	f7 e4       	ldi	r31, 0x47	; 71
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_reset+0x38>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_reset+0x3e>
 176:	00 00       	nop
 178:	42 98       	cbi	0x08, 2	; 8
 17a:	e6 e6       	ldi	r30, 0x66	; 102
 17c:	fe e0       	ldi	r31, 0x0E	; 14
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_reset+0x46>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	88 b9       	out	0x08, r24	; 8
 18a:	42 9a       	sbi	0x08, 2	; 8
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	97 e4       	ldi	r25, 0x47	; 71
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_reset+0x58>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_reset+0x5e>
 196:	00 00       	nop
 198:	42 98       	cbi	0x08, 2	; 8
 19a:	e6 e6       	ldi	r30, 0x66	; 102
 19c:	fe e0       	ldi	r31, 0x0E	; 14
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_reset+0x66>
 1a2:	00 00       	nop
 1a4:	40 98       	cbi	0x08, 0	; 8
 1a6:	41 98       	cbi	0x08, 1	; 8
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	42 9a       	sbi	0x08, 2	; 8
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	97 e4       	ldi	r25, 0x47	; 71
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_reset+0x7a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_reset+0x80>
 1b8:	00 00       	nop
 1ba:	42 98       	cbi	0x08, 2	; 8
 1bc:	08 95       	ret

000001be <lcd_wr_command>:
 1be:	98 b1       	in	r25, 0x08	; 8
 1c0:	9f 70       	andi	r25, 0x0F	; 15
 1c2:	98 b9       	out	0x08, r25	; 8
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	28 2f       	mov	r18, r24
 1c8:	20 7f       	andi	r18, 0xF0	; 240
 1ca:	92 2b       	or	r25, r18
 1cc:	98 b9       	out	0x08, r25	; 8
 1ce:	40 98       	cbi	0x08, 0	; 8
 1d0:	41 98       	cbi	0x08, 1	; 8
 1d2:	42 9a       	sbi	0x08, 2	; 8
 1d4:	ef ef       	ldi	r30, 0xFF	; 255
 1d6:	f7 e4       	ldi	r31, 0x47	; 71
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_wr_command+0x1a>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_wr_command+0x20>
 1de:	00 00       	nop
 1e0:	42 98       	cbi	0x08, 2	; 8
 1e2:	98 b1       	in	r25, 0x08	; 8
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	98 b9       	out	0x08, r25	; 8
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	82 95       	swap	r24
 1ec:	80 7f       	andi	r24, 0xF0	; 240
 1ee:	89 2b       	or	r24, r25
 1f0:	88 b9       	out	0x08, r24	; 8
 1f2:	40 98       	cbi	0x08, 0	; 8
 1f4:	41 98       	cbi	0x08, 1	; 8
 1f6:	42 9a       	sbi	0x08, 2	; 8
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	97 e4       	ldi	r25, 0x47	; 71
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_wr_command+0x3e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_wr_command+0x44>
 202:	00 00       	nop
 204:	42 98       	cbi	0x08, 2	; 8
 206:	08 95       	ret

00000208 <lcd_init>:
 208:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
 20c:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_reset>
 210:	86 e6       	ldi	r24, 0x66	; 102
 212:	9e e0       	ldi	r25, 0x0E	; 14
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init+0xc>
 218:	00 00       	nop
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 22c:	8e e0       	ldi	r24, 0x0E	; 14
 22e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 238:	08 95       	ret

0000023a <lcd_wr_char>:
 23a:	98 b1       	in	r25, 0x08	; 8
 23c:	9f 70       	andi	r25, 0x0F	; 15
 23e:	98 b9       	out	0x08, r25	; 8
 240:	98 b1       	in	r25, 0x08	; 8
 242:	28 2f       	mov	r18, r24
 244:	20 7f       	andi	r18, 0xF0	; 240
 246:	92 2b       	or	r25, r18
 248:	98 b9       	out	0x08, r25	; 8
 24a:	40 9a       	sbi	0x08, 0	; 8
 24c:	41 98       	cbi	0x08, 1	; 8
 24e:	42 9a       	sbi	0x08, 2	; 8
 250:	ef ef       	ldi	r30, 0xFF	; 255
 252:	f7 e4       	ldi	r31, 0x47	; 71
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_wr_char+0x1a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_wr_char+0x20>
 25a:	00 00       	nop
 25c:	42 98       	cbi	0x08, 2	; 8
 25e:	98 b1       	in	r25, 0x08	; 8
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	98 b9       	out	0x08, r25	; 8
 264:	98 b1       	in	r25, 0x08	; 8
 266:	82 95       	swap	r24
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	89 2b       	or	r24, r25
 26c:	88 b9       	out	0x08, r24	; 8
 26e:	40 9a       	sbi	0x08, 0	; 8
 270:	41 98       	cbi	0x08, 1	; 8
 272:	42 9a       	sbi	0x08, 2	; 8
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	97 e4       	ldi	r25, 0x47	; 71
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_wr_char+0x3e>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_wr_char+0x44>
 27e:	00 00       	nop
 280:	42 98       	cbi	0x08, 2	; 8
 282:	08 95       	ret

00000284 <lcd_home>:
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 28a:	08 95       	ret

0000028c <lcd_cursor>:
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	71 f0       	breq	.+28     	; 0x2ac <lcd_cursor+0x20>
 290:	18 f4       	brcc	.+6      	; 0x298 <lcd_cursor+0xc>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	31 f0       	breq	.+12     	; 0x2a2 <lcd_cursor+0x16>
 296:	08 95       	ret
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	69 f0       	breq	.+26     	; 0x2b6 <lcd_cursor+0x2a>
 29c:	84 30       	cpi	r24, 0x04	; 4
 29e:	81 f0       	breq	.+32     	; 0x2c0 <lcd_cursor+0x34>
 2a0:	08 95       	ret
 2a2:	8f e7       	ldi	r24, 0x7F	; 127
 2a4:	86 0f       	add	r24, r22
 2a6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 2aa:	08 95       	ret
 2ac:	8f eb       	ldi	r24, 0xBF	; 191
 2ae:	86 0f       	add	r24, r22
 2b0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 2b4:	08 95       	ret
 2b6:	83 e9       	ldi	r24, 0x93	; 147
 2b8:	86 0f       	add	r24, r22
 2ba:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 2be:	08 95       	ret
 2c0:	83 ed       	ldi	r24, 0xD3	; 211
 2c2:	86 0f       	add	r24, r22
 2c4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 2c8:	08 95       	ret

000002ca <lcd_string>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
 2d0:	88 81       	ld	r24, Y
 2d2:	88 23       	and	r24, r24
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <lcd_string+0x18>
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 2dc:	89 91       	ld	r24, Y+
 2de:	81 11       	cpse	r24, r1
 2e0:	fb cf       	rjmp	.-10     	; 0x2d8 <lcd_string+0xe>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <lcd_print>:
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8a 01       	movw	r16, r20
 2f2:	e9 01       	movw	r28, r18
 2f4:	88 23       	and	r24, r24
 2f6:	11 f0       	breq	.+4      	; 0x2fc <lcd_print+0x14>
 2f8:	61 11       	cpse	r22, r1
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <lcd_print+0x1a>
 2fc:	0e 94 42 01 	call	0x284	; 0x284 <lcd_home>
 300:	02 c0       	rjmp	.+4      	; 0x306 <lcd_print+0x1e>
 302:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_cursor>
 306:	c5 30       	cpi	r28, 0x05	; 5
 308:	d1 05       	cpc	r29, r1
 30a:	09 f0       	breq	.+2      	; 0x30e <lcd_print+0x26>
 30c:	df c0       	rjmp	.+446    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 30e:	98 01       	movw	r18, r16
 310:	32 95       	swap	r19
 312:	22 95       	swap	r18
 314:	2f 70       	andi	r18, 0x0F	; 15
 316:	23 27       	eor	r18, r19
 318:	3f 70       	andi	r19, 0x0F	; 15
 31a:	23 27       	eor	r18, r19
 31c:	a7 e4       	ldi	r26, 0x47	; 71
 31e:	b3 e0       	ldi	r27, 0x03	; 3
 320:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	c0 96       	adiw	r24, 0x30	; 48
 332:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <__data_end+0x1>
 336:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 33a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 33e:	98 01       	movw	r18, r16
 340:	36 95       	lsr	r19
 342:	27 95       	ror	r18
 344:	36 95       	lsr	r19
 346:	27 95       	ror	r18
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	a5 ec       	ldi	r26, 0xC5	; 197
 34e:	b0 e2       	ldi	r27, 0x20	; 32
 350:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 354:	ac 01       	movw	r20, r24
 356:	52 95       	swap	r21
 358:	42 95       	swap	r20
 35a:	4f 70       	andi	r20, 0x0F	; 15
 35c:	45 27       	eor	r20, r21
 35e:	5f 70       	andi	r21, 0x0F	; 15
 360:	45 27       	eor	r20, r21
 362:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <lcd_char_temp+0x1>
 366:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <lcd_char_temp>
 36a:	9a 01       	movw	r18, r20
 36c:	ad ec       	ldi	r26, 0xCD	; 205
 36e:	bc ec       	ldi	r27, 0xCC	; 204
 370:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	9c 01       	movw	r18, r24
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	82 0f       	add	r24, r18
 394:	93 1f       	adc	r25, r19
 396:	9a 01       	movw	r18, r20
 398:	28 1b       	sub	r18, r24
 39a:	39 0b       	sbc	r19, r25
 39c:	c9 01       	movw	r24, r18
 39e:	c0 96       	adiw	r24, 0x30	; 48
 3a0:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <thousand+0x1>
 3a4:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <thousand>
 3a8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <lcd_print+0xcc>
 3ae:	c3 30       	cpi	r28, 0x03	; 3
 3b0:	d1 05       	cpc	r29, r1
 3b2:	91 f5       	brne	.+100    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3b4:	98 01       	movw	r18, r16
 3b6:	36 95       	lsr	r19
 3b8:	27 95       	ror	r18
 3ba:	36 95       	lsr	r19
 3bc:	27 95       	ror	r18
 3be:	ab e7       	ldi	r26, 0x7B	; 123
 3c0:	b4 e1       	ldi	r27, 0x14	; 20
 3c2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 3c6:	ac 01       	movw	r20, r24
 3c8:	56 95       	lsr	r21
 3ca:	47 95       	ror	r20
 3cc:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <lcd_char_temp+0x1>
 3d0:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <lcd_char_temp>
 3d4:	9a 01       	movw	r18, r20
 3d6:	ad ec       	ldi	r26, 0xCD	; 205
 3d8:	bc ec       	ldi	r27, 0xCC	; 204
 3da:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	9c 01       	movw	r18, r24
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	82 0f       	add	r24, r18
 3fe:	93 1f       	adc	r25, r19
 400:	9a 01       	movw	r18, r20
 402:	28 1b       	sub	r18, r24
 404:	39 0b       	sbc	r19, r25
 406:	c9 01       	movw	r24, r18
 408:	c0 96       	adiw	r24, 0x30	; 48
 40a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <hundred+0x1>
 40e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <hundred>
 412:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	c2 30       	cpi	r28, 0x02	; 2
 41a:	d1 05       	cpc	r29, r1
 41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	5b c0       	rjmp	.+182    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 420:	98 01       	movw	r18, r16
 422:	ad ec       	ldi	r26, 0xCD	; 205
 424:	bc ec       	ldi	r27, 0xCC	; 204
 426:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 42a:	ac 01       	movw	r20, r24
 42c:	56 95       	lsr	r21
 42e:	47 95       	ror	r20
 430:	56 95       	lsr	r21
 432:	47 95       	ror	r20
 434:	56 95       	lsr	r21
 436:	47 95       	ror	r20
 438:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <lcd_char_temp+0x1>
 43c:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <lcd_char_temp>
 440:	9a 01       	movw	r18, r20
 442:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	9c 01       	movw	r18, r24
 454:	22 0f       	add	r18, r18
 456:	33 1f       	adc	r19, r19
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	82 0f       	add	r24, r18
 466:	93 1f       	adc	r25, r19
 468:	9a 01       	movw	r18, r20
 46a:	28 1b       	sub	r18, r24
 46c:	39 0b       	sbc	r19, r25
 46e:	c9 01       	movw	r24, r18
 470:	c0 96       	adiw	r24, 0x30	; 48
 472:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <tens+0x1>
 476:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <tens>
 47a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 47e:	98 01       	movw	r18, r16
 480:	ad ec       	ldi	r26, 0xCD	; 205
 482:	bc ec       	ldi	r27, 0xCC	; 204
 484:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__umulhisi3>
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	9c 01       	movw	r18, r24
 496:	22 0f       	add	r18, r18
 498:	33 1f       	adc	r19, r19
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	82 0f       	add	r24, r18
 4a8:	93 1f       	adc	r25, r19
 4aa:	98 01       	movw	r18, r16
 4ac:	28 1b       	sub	r18, r24
 4ae:	39 0b       	sbc	r19, r25
 4b0:	c9 01       	movw	r24, r18
 4b2:	c0 96       	adiw	r24, 0x30	; 48
 4b4:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <unit+0x1>
 4b8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <unit>
 4bc:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 4c0:	26 97       	sbiw	r28, 0x06	; 6
 4c2:	6c f0       	brlt	.+26     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c4:	85 e6       	ldi	r24, 0x65	; 101
 4c6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_wr_char>
 4ca:	09 c0       	rjmp	.+18     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4cc:	c4 30       	cpi	r28, 0x04	; 4
 4ce:	d1 05       	cpc	r29, r1
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d2:	6d cf       	rjmp	.-294    	; 0x3ae <lcd_print+0xc6>
 4d4:	34 cf       	rjmp	.-408    	; 0x33e <lcd_print+0x56>
 4d6:	c1 30       	cpi	r28, 0x01	; 1
 4d8:	d1 05       	cpc	r29, r1
 4da:	91 f7       	brne	.-28     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4dc:	d0 cf       	rjmp	.-96     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	08 95       	ret

000004e8 <lcd_clear>:
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_wr_command>
 4ee:	08 95       	ret

000004f0 <ud_port_config>:
 4f0:	51 9a       	sbi	0x0a, 1	; 10
 4f2:	50 98       	cbi	0x0a, 0	; 10
 4f4:	59 98       	cbi	0x0b, 1	; 11
 4f6:	58 98       	cbi	0x0b, 0	; 11
 4f8:	08 95       	ret

000004fa <ud_wake>:
}

//Function to wake sensor
void ud_wake()
{
	UD_PORT |= (1 << UD_TRIG_PIN); //WRITE HIGH TO OUTPUT
 4fa:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	81 e3       	ldi	r24, 0x31	; 49
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <ud_wake+0x4>
 502:	00 00       	nop
	_delay_us(10); //DELAY FOR 10us
	UD_PORT &= ~(1 << UD_TRIG_PIN); //WRITE LOW TO OUTPUT
 504:	59 98       	cbi	0x0b, 1	; 11
 506:	08 95       	ret

00000508 <ud_getPulse>:
}

//Function to get echo pulse duration in clock cycles
uint32_t ud_getPulse()
{
	uint32_t cycles = 0;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	dc 01       	movw	r26, r24
	uint32_t pulseWidthCycles = 0;
	
	//Wait for if any earlier echo high pulse to end
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) == 1)
 50e:	0a c0       	rjmp	.+20     	; 0x524 <ud_getPulse+0x1c>
	{
		if(cycles++ >= UD_MAX_CYCLE)
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	a1 1d       	adc	r26, r1
 514:	b1 1d       	adc	r27, r1
 516:	81 3b       	cpi	r24, 0xB1	; 177
 518:	26 e3       	ldi	r18, 0x36	; 54
 51a:	92 07       	cpc	r25, r18
 51c:	a1 05       	cpc	r26, r1
 51e:	b1 05       	cpc	r27, r1
 520:	09 f4       	brne	.+2      	; 0x524 <ud_getPulse+0x1c>
 522:	5d c0       	rjmp	.+186    	; 0x5de <ud_getPulse+0xd6>
{
	uint32_t cycles = 0;
	uint32_t pulseWidthCycles = 0;
	
	//Wait for if any earlier echo high pulse to end
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) == 1)
 524:	48 99       	sbic	0x09, 0	; 9
 526:	f4 cf       	rjmp	.-24     	; 0x510 <ud_getPulse+0x8>
 528:	0e c0       	rjmp	.+28     	; 0x546 <ud_getPulse+0x3e>
	}
	
	//Wait for the echo high pulse to start
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) != 1)
	{
		if(cycles++ >= UD_MAX_CYCLE)
 52a:	ac 01       	movw	r20, r24
 52c:	bd 01       	movw	r22, r26
 52e:	4f 5f       	subi	r20, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	6f 4f       	sbci	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	80 3b       	cpi	r24, 0xB0	; 176
 538:	96 43       	sbci	r25, 0x36	; 54
 53a:	a1 05       	cpc	r26, r1
 53c:	b1 05       	cpc	r27, r1
 53e:	08 f0       	brcs	.+2      	; 0x542 <ud_getPulse+0x3a>
 540:	52 c0       	rjmp	.+164    	; 0x5e6 <ud_getPulse+0xde>
 542:	db 01       	movw	r26, r22
 544:	ca 01       	movw	r24, r20
		if(cycles++ >= UD_MAX_CYCLE)
			return UD_TIMEOUT;
	}
	
	//Wait for the echo high pulse to start
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) != 1)
 546:	48 9b       	sbis	0x09, 0	; 9
 548:	f0 cf       	rjmp	.-32     	; 0x52a <ud_getPulse+0x22>
		if(cycles++ >= UD_MAX_CYCLE)
			return UD_TIMEOUT;
	}
	
	//Timing critical code is starting
	cli(); //CLEAR INTERRUPT
 54a:	f8 94       	cli
	
	//Wait for the echo high pulse to stop
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) == 1)
 54c:	48 9b       	sbis	0x09, 0	; 9
 54e:	1e c0       	rjmp	.+60     	; 0x58c <ud_getPulse+0x84>
	{
		if(cycles++ >= UD_MAX_CYCLE)
 550:	80 3b       	cpi	r24, 0xB0	; 176
 552:	26 e3       	ldi	r18, 0x36	; 54
 554:	92 07       	cpc	r25, r18
 556:	a1 05       	cpc	r26, r1
 558:	b1 05       	cpc	r27, r1
 55a:	08 f0       	brcs	.+2      	; 0x55e <ud_getPulse+0x56>
 55c:	48 c0       	rjmp	.+144    	; 0x5ee <ud_getPulse+0xe6>
 55e:	40 eb       	ldi	r20, 0xB0	; 176
 560:	56 e3       	ldi	r21, 0x36	; 54
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	48 1b       	sub	r20, r24
 568:	59 0b       	sbc	r21, r25
 56a:	6a 0b       	sbc	r22, r26
 56c:	7b 0b       	sbc	r23, r27
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	dc 01       	movw	r26, r24
 574:	05 c0       	rjmp	.+10     	; 0x580 <ud_getPulse+0x78>
 576:	84 17       	cp	r24, r20
 578:	95 07       	cpc	r25, r21
 57a:	a6 07       	cpc	r26, r22
 57c:	b7 07       	cpc	r27, r23
 57e:	d9 f1       	breq	.+118    	; 0x5f6 <ud_getPulse+0xee>
			return UD_TIMEOUT;
			
		pulseWidthCycles++;
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	a1 1d       	adc	r26, r1
 584:	b1 1d       	adc	r27, r1
	
	//Timing critical code is starting
	cli(); //CLEAR INTERRUPT
	
	//Wait for the echo high pulse to stop
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) == 1)
 586:	48 99       	sbic	0x09, 0	; 9
 588:	f6 cf       	rjmp	.-20     	; 0x576 <ud_getPulse+0x6e>
 58a:	03 c0       	rjmp	.+6      	; 0x592 <ud_getPulse+0x8a>

//Function to get echo pulse duration in clock cycles
uint32_t ud_getPulse()
{
	uint32_t cycles = 0;
	uint32_t pulseWidthCycles = 0;
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	dc 01       	movw	r26, r24
			
		pulseWidthCycles++;
	}
	
	//Timing critical code is ending
	sei(); //SET INTERRUPT
 592:	78 94       	sei

	return _CTM(pulseWidthCycles * 24 + 16);
 594:	ac 01       	movw	r20, r24
 596:	bd 01       	movw	r22, r26
 598:	44 0f       	add	r20, r20
 59a:	55 1f       	adc	r21, r21
 59c:	66 1f       	adc	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	84 0f       	add	r24, r20
 5a2:	95 1f       	adc	r25, r21
 5a4:	a6 1f       	adc	r26, r22
 5a6:	b7 1f       	adc	r27, r23
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	aa 1f       	adc	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	bc 01       	movw	r22, r24
 5c2:	cd 01       	movw	r24, r26
 5c4:	60 5f       	subi	r22, 0xF0	; 240
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	2e e0       	ldi	r18, 0x0E	; 14
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	0e 94 af 04 	call	0x95e	; 0x95e <__udivmodsi4>
 5d8:	ca 01       	movw	r24, r20
 5da:	b9 01       	movw	r22, r18
 5dc:	08 95       	ret
	
	//Wait for if any earlier echo high pulse to end
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) == 1)
	{
		if(cycles++ >= UD_MAX_CYCLE)
			return UD_TIMEOUT;
 5de:	6f ef       	ldi	r22, 0xFF	; 255
 5e0:	7f ef       	ldi	r23, 0xFF	; 255
 5e2:	cb 01       	movw	r24, r22
 5e4:	08 95       	ret
	
	//Wait for the echo high pulse to start
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) != 1)
	{
		if(cycles++ >= UD_MAX_CYCLE)
			return UD_TIMEOUT;
 5e6:	6f ef       	ldi	r22, 0xFF	; 255
 5e8:	7f ef       	ldi	r23, 0xFF	; 255
 5ea:	cb 01       	movw	r24, r22
 5ec:	08 95       	ret
	
	//Wait for the echo high pulse to stop
	while(((UD_PDR & (1 << UD_ECHO_PIN)) >> UD_ECHO_PIN) == 1)
	{
		if(cycles++ >= UD_MAX_CYCLE)
			return UD_TIMEOUT;
 5ee:	6f ef       	ldi	r22, 0xFF	; 255
 5f0:	7f ef       	ldi	r23, 0xFF	; 255
 5f2:	cb 01       	movw	r24, r22
 5f4:	08 95       	ret
 5f6:	6f ef       	ldi	r22, 0xFF	; 255
 5f8:	7f ef       	ldi	r23, 0xFF	; 255
 5fa:	cb 01       	movw	r24, r22

	return _CTM(pulseWidthCycles * 24 + 16);
	/* Previous loop is ~20 clock cycles long and 
	   also have 16 clocks between the previous pulse edge 
	   and the start of the loop */
}
 5fc:	08 95       	ret

000005fe <ud_getData>:
//Function to get sensor data
bool ud_getData()
{
	uint32_t pulseWidthTimeUs;
	
	ud_wake();
 5fe:	0e 94 7d 02 	call	0x4fa	; 0x4fa <ud_wake>
	pulseWidthTimeUs = ud_getPulse();
 602:	0e 94 84 02 	call	0x508	; 0x508 <ud_getPulse>
	if(pulseWidthTimeUs >= UD_MAX_ECHO_TIME)
 606:	68 36       	cpi	r22, 0x68	; 104
 608:	2b e5       	ldi	r18, 0x5B	; 91
 60a:	72 07       	cpc	r23, r18
 60c:	81 05       	cpc	r24, r1
 60e:	91 05       	cpc	r25, r1
 610:	40 f0       	brcs	.+16     	; 0x622 <ud_getData+0x24>
	{
		ud_distanceCm = UD_MAX_ECHO_TIME * 0.034 / 2;
 612:	8d e8       	ldi	r24, 0x8D	; 141
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <ud_distanceCm+0x1>
 61a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <ud_distanceCm>
		return true;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	08 95       	ret
	}
	
	if(pulseWidthTimeUs != UD_TIMEOUT)
 622:	6f 3f       	cpi	r22, 0xFF	; 255
 624:	2f ef       	ldi	r18, 0xFF	; 255
 626:	72 07       	cpc	r23, r18
 628:	82 07       	cpc	r24, r18
 62a:	92 07       	cpc	r25, r18
 62c:	b1 f0       	breq	.+44     	; 0x65a <ud_getData+0x5c>
	{
		ud_distanceCm = pulseWidthTimeUs * 0.034 / 2;
 62e:	0e 94 b4 03 	call	0x768	; 0x768 <__floatunsisf>
 632:	26 e9       	ldi	r18, 0x96	; 150
 634:	33 e4       	ldi	r19, 0x43	; 67
 636:	4b e0       	ldi	r20, 0x0B	; 11
 638:	5d e3       	ldi	r21, 0x3D	; 61
 63a:	0e 94 1a 04 	call	0x834	; 0x834 <__mulsf3>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	5f e3       	ldi	r21, 0x3F	; 63
 646:	0e 94 1a 04 	call	0x834	; 0x834 <__mulsf3>
 64a:	0e 94 85 03 	call	0x70a	; 0x70a <__fixunssfsi>
 64e:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <ud_distanceCm+0x1>
 652:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <ud_distanceCm>
		return true;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
	}
	
	return false;
 65a:	80 e0       	ldi	r24, 0x00	; 0
}
 65c:	08 95       	ret

0000065e <ultrasonicReading>:

//Function to get distance reading
uint16_t ultrasonicReading()
{
	if(ud_getData())
 65e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ud_getData>
 662:	88 23       	and	r24, r24
 664:	29 f0       	breq	.+10     	; 0x670 <ultrasonicReading+0x12>
		return ud_distanceCm;
 666:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <ud_distanceCm>
 66a:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <ud_distanceCm+0x1>
 66e:	08 95       	ret
	else
		return (uint16_t)NAN;
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
}
 674:	08 95       	ret

00000676 <port_init>:
void port_init();
void init_devices(void);

void port_init()
{
	lcd_init();
 676:	0e 94 04 01 	call	0x208	; 0x208 <lcd_init>
}

//Function to initialize sensor
void ud_init()
{
	ud_port_config();
 67a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ud_port_config>
 67e:	08 95       	ret

00000680 <init_devices>:
	ud_init();
}

void init_devices(void)
{
	cli();
 680:	f8 94       	cli
	port_init();
 682:	0e 94 3b 03 	call	0x676	; 0x676 <port_init>
	sei();
 686:	78 94       	sei
 688:	08 95       	ret

0000068a <main>:
}

int main(void)
{
	init_devices();
 68a:	0e 94 40 03 	call	0x680	; 0x680 <init_devices>
	
	lcd_cursor(1,3);
 68e:	63 e0       	ldi	r22, 0x03	; 3
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_cursor>
	lcd_string("HACTOBER-2K19");
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	92 e0       	ldi	r25, 0x02	; 2
 69a:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_string>
	lcd_cursor(2,4);
 69e:	64 e0       	ldi	r22, 0x04	; 4
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_cursor>
	lcd_string("OPENSOURCE");
 6a6:	8e e0       	ldi	r24, 0x0E	; 14
 6a8:	92 e0       	ldi	r25, 0x02	; 2
 6aa:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	99 e5       	ldi	r25, 0x59	; 89
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	80 40       	sbci	r24, 0x00	; 0
 6b8:	90 40       	sbci	r25, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x2a>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x34>
 6be:	00 00       	nop
	_delay_ms(2000);
	lcd_clear();
 6c0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <lcd_clear>
	
	lcd_cursor(1,5);
 6c4:	65 e0       	ldi	r22, 0x05	; 5
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_cursor>
	lcd_string("DISTANCE");
 6cc:	89 e1       	ldi	r24, 0x19	; 25
 6ce:	92 e0       	ldi	r25, 0x02	; 2
 6d0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_string>
	lcd_cursor(2,10);
 6d4:	6a e0       	ldi	r22, 0x0A	; 10
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_cursor>
	lcd_string("CM");
 6dc:	82 e2       	ldi	r24, 0x22	; 34
 6de:	92 e0       	ldi	r25, 0x02	; 2
 6e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_string>
	
	while(1)
	{	
		lcd_print(2,6,ultrasonicReading(),4);
 6e4:	0e 94 2f 03 	call	0x65e	; 0x65e <ultrasonicReading>
 6e8:	24 e0       	ldi	r18, 0x04	; 4
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	ac 01       	movw	r20, r24
 6ee:	66 e0       	ldi	r22, 0x06	; 6
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_print>
 6f6:	2f ef       	ldi	r18, 0xFF	; 255
 6f8:	8f e7       	ldi	r24, 0x7F	; 127
 6fa:	96 e1       	ldi	r25, 0x16	; 22
 6fc:	21 50       	subi	r18, 0x01	; 1
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	90 40       	sbci	r25, 0x00	; 0
 702:	e1 f7       	brne	.-8      	; 0x6fc <main+0x72>
 704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x7c>
 706:	00 00       	nop
 708:	ed cf       	rjmp	.-38     	; 0x6e4 <main+0x5a>

0000070a <__fixunssfsi>:
 70a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_splitA>
 70e:	88 f0       	brcs	.+34     	; 0x732 <__fixunssfsi+0x28>
 710:	9f 57       	subi	r25, 0x7F	; 127
 712:	98 f0       	brcs	.+38     	; 0x73a <__fixunssfsi+0x30>
 714:	b9 2f       	mov	r27, r25
 716:	99 27       	eor	r25, r25
 718:	b7 51       	subi	r27, 0x17	; 23
 71a:	b0 f0       	brcs	.+44     	; 0x748 <__fixunssfsi+0x3e>
 71c:	e1 f0       	breq	.+56     	; 0x756 <__fixunssfsi+0x4c>
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	1a f0       	brmi	.+6      	; 0x72e <__fixunssfsi+0x24>
 728:	ba 95       	dec	r27
 72a:	c9 f7       	brne	.-14     	; 0x71e <__fixunssfsi+0x14>
 72c:	14 c0       	rjmp	.+40     	; 0x756 <__fixunssfsi+0x4c>
 72e:	b1 30       	cpi	r27, 0x01	; 1
 730:	91 f0       	breq	.+36     	; 0x756 <__fixunssfsi+0x4c>
 732:	0e 94 13 04 	call	0x826	; 0x826 <__fp_zero>
 736:	b1 e0       	ldi	r27, 0x01	; 1
 738:	08 95       	ret
 73a:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_zero>
 73e:	67 2f       	mov	r22, r23
 740:	78 2f       	mov	r23, r24
 742:	88 27       	eor	r24, r24
 744:	b8 5f       	subi	r27, 0xF8	; 248
 746:	39 f0       	breq	.+14     	; 0x756 <__fixunssfsi+0x4c>
 748:	b9 3f       	cpi	r27, 0xF9	; 249
 74a:	cc f3       	brlt	.-14     	; 0x73e <__fixunssfsi+0x34>
 74c:	86 95       	lsr	r24
 74e:	77 95       	ror	r23
 750:	67 95       	ror	r22
 752:	b3 95       	inc	r27
 754:	d9 f7       	brne	.-10     	; 0x74c <__fixunssfsi+0x42>
 756:	3e f4       	brtc	.+14     	; 0x766 <__fixunssfsi+0x5c>
 758:	90 95       	com	r25
 75a:	80 95       	com	r24
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	8f 4f       	sbci	r24, 0xFF	; 255
 764:	9f 4f       	sbci	r25, 0xFF	; 255
 766:	08 95       	ret

00000768 <__floatunsisf>:
 768:	e8 94       	clt
 76a:	09 c0       	rjmp	.+18     	; 0x77e <__floatsisf+0x12>

0000076c <__floatsisf>:
 76c:	97 fb       	bst	r25, 7
 76e:	3e f4       	brtc	.+14     	; 0x77e <__floatsisf+0x12>
 770:	90 95       	com	r25
 772:	80 95       	com	r24
 774:	70 95       	com	r23
 776:	61 95       	neg	r22
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	99 23       	and	r25, r25
 780:	a9 f0       	breq	.+42     	; 0x7ac <__floatsisf+0x40>
 782:	f9 2f       	mov	r31, r25
 784:	96 e9       	ldi	r25, 0x96	; 150
 786:	bb 27       	eor	r27, r27
 788:	93 95       	inc	r25
 78a:	f6 95       	lsr	r31
 78c:	87 95       	ror	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f1 11       	cpse	r31, r1
 796:	f8 cf       	rjmp	.-16     	; 0x788 <__floatsisf+0x1c>
 798:	fa f4       	brpl	.+62     	; 0x7d8 <__floatsisf+0x6c>
 79a:	bb 0f       	add	r27, r27
 79c:	11 f4       	brne	.+4      	; 0x7a2 <__floatsisf+0x36>
 79e:	60 ff       	sbrs	r22, 0
 7a0:	1b c0       	rjmp	.+54     	; 0x7d8 <__floatsisf+0x6c>
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <__floatsisf+0x6c>
 7ac:	88 23       	and	r24, r24
 7ae:	11 f0       	breq	.+4      	; 0x7b4 <__floatsisf+0x48>
 7b0:	96 e9       	ldi	r25, 0x96	; 150
 7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <__floatsisf+0x6a>
 7b4:	77 23       	and	r23, r23
 7b6:	21 f0       	breq	.+8      	; 0x7c0 <__floatsisf+0x54>
 7b8:	9e e8       	ldi	r25, 0x8E	; 142
 7ba:	87 2f       	mov	r24, r23
 7bc:	76 2f       	mov	r23, r22
 7be:	05 c0       	rjmp	.+10     	; 0x7ca <__floatsisf+0x5e>
 7c0:	66 23       	and	r22, r22
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <__floatsisf+0x74>
 7c4:	96 e8       	ldi	r25, 0x86	; 134
 7c6:	86 2f       	mov	r24, r22
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	2a f0       	brmi	.+10     	; 0x7d8 <__floatsisf+0x6c>
 7ce:	9a 95       	dec	r25
 7d0:	66 0f       	add	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	da f7       	brpl	.-10     	; 0x7ce <__floatsisf+0x62>
 7d8:	88 0f       	add	r24, r24
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret

000007e2 <__fp_split3>:
 7e2:	57 fd       	sbrc	r21, 7
 7e4:	90 58       	subi	r25, 0x80	; 128
 7e6:	44 0f       	add	r20, r20
 7e8:	55 1f       	adc	r21, r21
 7ea:	59 f0       	breq	.+22     	; 0x802 <__fp_splitA+0x10>
 7ec:	5f 3f       	cpi	r21, 0xFF	; 255
 7ee:	71 f0       	breq	.+28     	; 0x80c <__fp_splitA+0x1a>
 7f0:	47 95       	ror	r20

000007f2 <__fp_splitA>:
 7f2:	88 0f       	add	r24, r24
 7f4:	97 fb       	bst	r25, 7
 7f6:	99 1f       	adc	r25, r25
 7f8:	61 f0       	breq	.+24     	; 0x812 <__fp_splitA+0x20>
 7fa:	9f 3f       	cpi	r25, 0xFF	; 255
 7fc:	79 f0       	breq	.+30     	; 0x81c <__fp_splitA+0x2a>
 7fe:	87 95       	ror	r24
 800:	08 95       	ret
 802:	12 16       	cp	r1, r18
 804:	13 06       	cpc	r1, r19
 806:	14 06       	cpc	r1, r20
 808:	55 1f       	adc	r21, r21
 80a:	f2 cf       	rjmp	.-28     	; 0x7f0 <__fp_split3+0xe>
 80c:	46 95       	lsr	r20
 80e:	f1 df       	rcall	.-30     	; 0x7f2 <__fp_splitA>
 810:	08 c0       	rjmp	.+16     	; 0x822 <__fp_splitA+0x30>
 812:	16 16       	cp	r1, r22
 814:	17 06       	cpc	r1, r23
 816:	18 06       	cpc	r1, r24
 818:	99 1f       	adc	r25, r25
 81a:	f1 cf       	rjmp	.-30     	; 0x7fe <__fp_splitA+0xc>
 81c:	86 95       	lsr	r24
 81e:	71 05       	cpc	r23, r1
 820:	61 05       	cpc	r22, r1
 822:	08 94       	sec
 824:	08 95       	ret

00000826 <__fp_zero>:
 826:	e8 94       	clt

00000828 <__fp_szero>:
 828:	bb 27       	eor	r27, r27
 82a:	66 27       	eor	r22, r22
 82c:	77 27       	eor	r23, r23
 82e:	cb 01       	movw	r24, r22
 830:	97 f9       	bld	r25, 7
 832:	08 95       	ret

00000834 <__mulsf3>:
 834:	0e 94 2d 04 	call	0x85a	; 0x85a <__mulsf3x>
 838:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_round>
 83c:	0e 94 90 04 	call	0x920	; 0x920 <__fp_pscA>
 840:	38 f0       	brcs	.+14     	; 0x850 <__mulsf3+0x1c>
 842:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_pscB>
 846:	20 f0       	brcs	.+8      	; 0x850 <__mulsf3+0x1c>
 848:	95 23       	and	r25, r21
 84a:	11 f0       	breq	.+4      	; 0x850 <__mulsf3+0x1c>
 84c:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>
 850:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_nan>
 854:	11 24       	eor	r1, r1
 856:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_szero>

0000085a <__mulsf3x>:
 85a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__fp_split3>
 85e:	70 f3       	brcs	.-36     	; 0x83c <__mulsf3+0x8>

00000860 <__mulsf3_pse>:
 860:	95 9f       	mul	r25, r21
 862:	c1 f3       	breq	.-16     	; 0x854 <__mulsf3+0x20>
 864:	95 0f       	add	r25, r21
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	55 1f       	adc	r21, r21
 86a:	62 9f       	mul	r22, r18
 86c:	f0 01       	movw	r30, r0
 86e:	72 9f       	mul	r23, r18
 870:	bb 27       	eor	r27, r27
 872:	f0 0d       	add	r31, r0
 874:	b1 1d       	adc	r27, r1
 876:	63 9f       	mul	r22, r19
 878:	aa 27       	eor	r26, r26
 87a:	f0 0d       	add	r31, r0
 87c:	b1 1d       	adc	r27, r1
 87e:	aa 1f       	adc	r26, r26
 880:	64 9f       	mul	r22, r20
 882:	66 27       	eor	r22, r22
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	66 1f       	adc	r22, r22
 88a:	82 9f       	mul	r24, r18
 88c:	22 27       	eor	r18, r18
 88e:	b0 0d       	add	r27, r0
 890:	a1 1d       	adc	r26, r1
 892:	62 1f       	adc	r22, r18
 894:	73 9f       	mul	r23, r19
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	62 1f       	adc	r22, r18
 89c:	83 9f       	mul	r24, r19
 89e:	a0 0d       	add	r26, r0
 8a0:	61 1d       	adc	r22, r1
 8a2:	22 1f       	adc	r18, r18
 8a4:	74 9f       	mul	r23, r20
 8a6:	33 27       	eor	r19, r19
 8a8:	a0 0d       	add	r26, r0
 8aa:	61 1d       	adc	r22, r1
 8ac:	23 1f       	adc	r18, r19
 8ae:	84 9f       	mul	r24, r20
 8b0:	60 0d       	add	r22, r0
 8b2:	21 1d       	adc	r18, r1
 8b4:	82 2f       	mov	r24, r18
 8b6:	76 2f       	mov	r23, r22
 8b8:	6a 2f       	mov	r22, r26
 8ba:	11 24       	eor	r1, r1
 8bc:	9f 57       	subi	r25, 0x7F	; 127
 8be:	50 40       	sbci	r21, 0x00	; 0
 8c0:	9a f0       	brmi	.+38     	; 0x8e8 <__mulsf3_pse+0x88>
 8c2:	f1 f0       	breq	.+60     	; 0x900 <__mulsf3_pse+0xa0>
 8c4:	88 23       	and	r24, r24
 8c6:	4a f0       	brmi	.+18     	; 0x8da <__mulsf3_pse+0x7a>
 8c8:	ee 0f       	add	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	bb 1f       	adc	r27, r27
 8ce:	66 1f       	adc	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	a9 f7       	brne	.-22     	; 0x8c4 <__mulsf3_pse+0x64>
 8da:	9e 3f       	cpi	r25, 0xFE	; 254
 8dc:	51 05       	cpc	r21, r1
 8de:	80 f0       	brcs	.+32     	; 0x900 <__mulsf3_pse+0xa0>
 8e0:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>
 8e4:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_szero>
 8e8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ea:	e4 f3       	brlt	.-8      	; 0x8e4 <__mulsf3_pse+0x84>
 8ec:	98 3e       	cpi	r25, 0xE8	; 232
 8ee:	d4 f3       	brlt	.-12     	; 0x8e4 <__mulsf3_pse+0x84>
 8f0:	86 95       	lsr	r24
 8f2:	77 95       	ror	r23
 8f4:	67 95       	ror	r22
 8f6:	b7 95       	ror	r27
 8f8:	f7 95       	ror	r31
 8fa:	e7 95       	ror	r30
 8fc:	9f 5f       	subi	r25, 0xFF	; 255
 8fe:	c1 f7       	brne	.-16     	; 0x8f0 <__mulsf3_pse+0x90>
 900:	fe 2b       	or	r31, r30
 902:	88 0f       	add	r24, r24
 904:	91 1d       	adc	r25, r1
 906:	96 95       	lsr	r25
 908:	87 95       	ror	r24
 90a:	97 f9       	bld	r25, 7
 90c:	08 95       	ret

0000090e <__fp_inf>:
 90e:	97 f9       	bld	r25, 7
 910:	9f 67       	ori	r25, 0x7F	; 127
 912:	80 e8       	ldi	r24, 0x80	; 128
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	60 e0       	ldi	r22, 0x00	; 0
 918:	08 95       	ret

0000091a <__fp_nan>:
 91a:	9f ef       	ldi	r25, 0xFF	; 255
 91c:	80 ec       	ldi	r24, 0xC0	; 192
 91e:	08 95       	ret

00000920 <__fp_pscA>:
 920:	00 24       	eor	r0, r0
 922:	0a 94       	dec	r0
 924:	16 16       	cp	r1, r22
 926:	17 06       	cpc	r1, r23
 928:	18 06       	cpc	r1, r24
 92a:	09 06       	cpc	r0, r25
 92c:	08 95       	ret

0000092e <__fp_pscB>:
 92e:	00 24       	eor	r0, r0
 930:	0a 94       	dec	r0
 932:	12 16       	cp	r1, r18
 934:	13 06       	cpc	r1, r19
 936:	14 06       	cpc	r1, r20
 938:	05 06       	cpc	r0, r21
 93a:	08 95       	ret

0000093c <__fp_round>:
 93c:	09 2e       	mov	r0, r25
 93e:	03 94       	inc	r0
 940:	00 0c       	add	r0, r0
 942:	11 f4       	brne	.+4      	; 0x948 <__fp_round+0xc>
 944:	88 23       	and	r24, r24
 946:	52 f0       	brmi	.+20     	; 0x95c <__fp_round+0x20>
 948:	bb 0f       	add	r27, r27
 94a:	40 f4       	brcc	.+16     	; 0x95c <__fp_round+0x20>
 94c:	bf 2b       	or	r27, r31
 94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0x18>
 950:	60 ff       	sbrs	r22, 0
 952:	04 c0       	rjmp	.+8      	; 0x95c <__fp_round+0x20>
 954:	6f 5f       	subi	r22, 0xFF	; 255
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	08 95       	ret

0000095e <__udivmodsi4>:
 95e:	a1 e2       	ldi	r26, 0x21	; 33
 960:	1a 2e       	mov	r1, r26
 962:	aa 1b       	sub	r26, r26
 964:	bb 1b       	sub	r27, r27
 966:	fd 01       	movw	r30, r26
 968:	0d c0       	rjmp	.+26     	; 0x984 <__udivmodsi4_ep>

0000096a <__udivmodsi4_loop>:
 96a:	aa 1f       	adc	r26, r26
 96c:	bb 1f       	adc	r27, r27
 96e:	ee 1f       	adc	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	a2 17       	cp	r26, r18
 974:	b3 07       	cpc	r27, r19
 976:	e4 07       	cpc	r30, r20
 978:	f5 07       	cpc	r31, r21
 97a:	20 f0       	brcs	.+8      	; 0x984 <__udivmodsi4_ep>
 97c:	a2 1b       	sub	r26, r18
 97e:	b3 0b       	sbc	r27, r19
 980:	e4 0b       	sbc	r30, r20
 982:	f5 0b       	sbc	r31, r21

00000984 <__udivmodsi4_ep>:
 984:	66 1f       	adc	r22, r22
 986:	77 1f       	adc	r23, r23
 988:	88 1f       	adc	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	1a 94       	dec	r1
 98e:	69 f7       	brne	.-38     	; 0x96a <__udivmodsi4_loop>
 990:	60 95       	com	r22
 992:	70 95       	com	r23
 994:	80 95       	com	r24
 996:	90 95       	com	r25
 998:	9b 01       	movw	r18, r22
 99a:	ac 01       	movw	r20, r24
 99c:	bd 01       	movw	r22, r26
 99e:	cf 01       	movw	r24, r30
 9a0:	08 95       	ret

000009a2 <__umulhisi3>:
 9a2:	a2 9f       	mul	r26, r18
 9a4:	b0 01       	movw	r22, r0
 9a6:	b3 9f       	mul	r27, r19
 9a8:	c0 01       	movw	r24, r0
 9aa:	a3 9f       	mul	r26, r19
 9ac:	70 0d       	add	r23, r0
 9ae:	81 1d       	adc	r24, r1
 9b0:	11 24       	eor	r1, r1
 9b2:	91 1d       	adc	r25, r1
 9b4:	b2 9f       	mul	r27, r18
 9b6:	70 0d       	add	r23, r0
 9b8:	81 1d       	adc	r24, r1
 9ba:	11 24       	eor	r1, r1
 9bc:	91 1d       	adc	r25, r1
 9be:	08 95       	ret

000009c0 <_exit>:
 9c0:	f8 94       	cli

000009c2 <__stop_program>:
 9c2:	ff cf       	rjmp	.-2      	; 0x9c2 <__stop_program>
